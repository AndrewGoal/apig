import {
  Count,
  CountSchema,
  Filter,
  repository,
  Where,
} from '@loopback/repository';
import {
  post,
  param,
  get,
  getFilterSchemaFor,
  getWhereSchemaFor,
  patch,
  del,
  requestBody,
} from '@loopback/rest';
import {<%= modelName %>} from '../models';
import {<%= repositoryName %>} from '../repositories';

export class <%= className %>Controller {
  constructor(
    @repository(<%= repositoryName %>)
    public <%= repositoryNameCamel %> : <%= repositoryName %>,
  ) {}

  <%_ Object.entries(api).forEach(([name, val]) => { -%>
    <%_ if (val['type'] === 'preset') { -%>

      <%_ if (val['name'] === 'create') { -%>
        @post('<%= val['path'] %>', {
          summary: "新增接口",
          responses: {
            '200': {
              description: '<%= modelName %> model instance',
              content: {'application/json': {schema: {'x-ts-type': <%= modelName %>}}},
            },
          },
        })
        async create(@requestBody() <%= modelVariableName %>: <%= modelName %>): Promise<<%= modelName %>> {
          return await this.<%= repositoryNameCamel %>.create(<%= modelVariableName %>);
        }
      <%_ } else if (val['name'] === 'findPage') { %>

        @get('<%= val['path'] %>', {
          summary: "分页查询接口",
          responses: {
            '200': {
              description: 'Object of page data, result.data is <%= modelName %> model instances, result.total is model count.',
              content: {
                'application/json': {
                  schema: {type: 'object', properties: {
                    data: {type: 'array', items: {'x-ts-type': <%= modelName %>}},
                    total: { type: 'object', properties: { count: { type: 'number' } } }
                  }},
                },
              },
            },
          },
        })
        async find(
          @param.query.object('filter', getFilterSchemaFor(<%= modelName %>)) filter?: Filter,
        ): Promise<{data: <%= modelName %>[], total:Count}> {
          if( filter && !filter.limit )
            filter.limit = 10;
          return {
            data: await this.<%= repositoryNameCamel %>.find(filter),
            total: await this.<%= repositoryNameCamel %>.count(filter ? filter['where'] : {})
          };
        }
      <%_ } else if (val['name'] === 'findById') { %>

        @get('<%= val['path'] %>/{id}', {
          summary: "根据ID查询记录接口",
          responses: {
            '200': {
              description: '<%= modelName %> model instance',
              content: {'application/json': {schema: {'x-ts-type': <%= modelName %>}}},
            },
          },
        })
        async findById(@param.path.<%= idType %>('id') id: <%= idType %>): Promise<<%= modelName %>> {
          return await this.<%= repositoryNameCamel %>.findById(id);
        }
      <%_ } else if (val['name'] === 'updateById') { %>

        @patch('<%= val['path'] %>/{id}', {
          summary: "根据ID更新记录接口",
          responses: {
            '204': {
              description: '<%= modelName %> PATCH success',
            },
          },
        })
        async updateById(
          @param.path.<%= idType %>('id') id: <%= idType %>,
          @requestBody() <%= modelVariableName %>: <%= modelName %>,
        ): Promise<void> {
          await this.<%= repositoryNameCamel %>.updateById(id, <%= modelVariableName %>);
        }
      <%_ } else if (val['name'] === 'deleteById') { %>

        @del('<%= val['path'] %>/{id}', {
          summary: "根据ID删除记录接口",
          responses: {
            '204': {
              description: '<%= modelName %> DELETE success',
            },
          },
        })
        async deleteById(@param.path.<%= idType %>('id') id: <%= idType %>): Promise<void> {
          await this.<%= repositoryNameCamel %>.deleteById(id);
        }
      <%_ }  %>
    <%_ } else {-%>

      @get('<%= val['path'] %>', {
        summary: '<%= val['summary']%>',
        responses: {
          '200': {
            description: 'Object of page data, result.data is <%= modelName %> model instances, result.total is model count.',
            content: {
              'application/json': {
                schema: {type: 'object', properties: {
                  data: {type: 'array', items: {'x-ts-type': <%= modelName %>}},
                  total: { type: 'object', properties: { count: { type: 'number' } } }
                }},
              },
            },
          },
        },
      })
      async <%= name %>(
        @param.query.object('filter', getFilterSchemaFor(<%= modelName %>)) filter?: Filter,
      ): Promise<{data: <%= modelName %>[], total:Count}> {
        filter = filter || {};
        <%_ if (val['filter']) { -%>
          filter.where = filter.where || {};
          Object.assign(filter.where, <%- JSON.stringify(val['filter']) %>);
        <%_ } -%>
        <%_ if (val['fields']) { -%>
          filter.fields = filter.fields || {};
          Object.assign(filter.fields, <%- JSON.stringify(val['fields']) %>);
        <%_ } -%>
        if( !filter.limit )
          filter.limit = 10;
        return {
          data: await this.<%= repositoryNameCamel %>.find(filter),
          total: await this.<%= repositoryNameCamel %>.count(filter['where'] || {})
        };
      }

    <%_ } -%>
  <%_ }) -%>

}
