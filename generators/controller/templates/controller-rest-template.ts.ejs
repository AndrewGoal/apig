import {
  Count,
  CountSchema,
  Filter,
  repository,
  Where,
} from '@loopback/repository';
import {
  post,
  param,
  get,
  getFilterSchemaFor,
  getWhereSchemaFor,
  patch,
  del,
  requestBody,
} from '@loopback/rest';
import {<%= modelName %>} from '../models';
import {<%= repositoryName %>} from '../repositories';

export class <%= className %>Controller {
  constructor(
    @repository(<%= repositoryName %>)
    public <%= repositoryNameCamel %> : <%= repositoryName %>,
  ) {}

  @post('<%= httpPathName %>', {
    summary: "新增接口",
    responses: {
      '200': {
        description: '<%= modelName %> model instance',
        content: {'application/json': {schema: {'x-ts-type': <%= modelName %>}}},
      },
    },
  })
  async create(@requestBody() <%= modelVariableName %>: <%= modelName %>): Promise<<%= modelName %>> {
    return await this.<%= repositoryNameCamel %>.create(<%= modelVariableName %>);
  }

  @get('<%= httpPathName %>/count', {
    summary: "查询总记录数接口",
    responses: {
      '200': {
        description: '<%= modelName %> model count',
        content: {'application/json': {schema: CountSchema}},
      },
    },
  })
  async count(
    @param.query.object('where', getWhereSchemaFor(<%= modelName %>)) where?: Where,
  ): Promise<Count> {
    return await this.<%= repositoryNameCamel %>.count(where);
  }

  @get('<%= httpPathName %>', {
    summary: "分页查询接口",
    responses: {
      '200': {
        description: 'Array of <%= modelName %> model instances',
        content: {
          'application/json': {
            schema: {type: 'array', items: {'x-ts-type': <%= modelName %>}},
          },
        },
      },
    },
  })
  async find(
    @param.query.object('filter', getFilterSchemaFor(<%= modelName %>)) filter?: Filter,
  ): Promise<<%= modelName %>[]> {
    return await this.<%= repositoryNameCamel %>.find(filter);
  }

  @get('<%= httpPathName %>/{id}', {
    summary: "根据ID查询记录接口",
    responses: {
      '200': {
        description: '<%= modelName %> model instance',
        content: {'application/json': {schema: {'x-ts-type': <%= modelName %>}}},
      },
    },
  })
  async findById(@param.path.<%= idType %>('id') id: <%= idType %>): Promise<<%= modelName %>> {
    return await this.<%= repositoryNameCamel %>.findById(id);
  }

  @patch('<%= httpPathName %>/{id}', {
    summary: "根据ID更新记录接口",
    responses: {
      '204': {
        description: '<%= modelName %> PATCH success',
      },
    },
  })
  async updateById(
    @param.path.<%= idType %>('id') id: <%= idType %>,
    @requestBody() <%= modelVariableName %>: <%= modelName %>,
  ): Promise<void> {
    await this.<%= repositoryNameCamel %>.updateById(id, <%= modelVariableName %>);
  }

  @del('<%= httpPathName %>/{id}', {
    summary: "根据ID删除记录接口",
    responses: {
      '204': {
        description: '<%= modelName %> DELETE success',
      },
    },
  })
  async deleteById(@param.path.<%= idType %>('id') id: <%= idType %>): Promise<void> {
    await this.<%= repositoryNameCamel %>.deleteById(id);
  }
}
